h1 Services
// Put controls into this div
.page
    .loading

a.btn.primary.launch-new(href="#") Install Service

.popover
    p name of the npm package published in default node.js repository.
    p Package can have 'server' script that should start service on the port.
    p The port number and some other params is passed as environment and command line.

// Module script
!= js('/js/service.js')

// Below is client-side _.templates (use <% %> and other identation!)
// Items list
script.list-template(type="text/template")
    table.bordered-table.zebra-striped
        thead
            tr
                th.state Service
                th.domain Domain
                th.domain Port
                th.control &nbsp;
        tbody
            <% _.each(items, function(item) { %>
            tr
                td.state
                    .state-icon
                        a(href="#", title="<%=item.state%>: <%=item.message%>")
                            img(src="state-<%=item.state%>.png")
                            .state-hole <%= item.children && item.children.length || 0 %>
                    .state-info
                        h3 <%=item.name || item.source%>
                        span <%= item.message %> 
                td.domain
                    h3
                        <% if(item.port != '0') { %>
                        a(href="http://<%= item.domain %>:<%= item.proxy_port || item.port  %>",target="_new") <%= item.domain %>
                        <% } %>
                td.domain
                    h3
                        <% if(item.port != '0') { %>
                        <%= item.port %>
                        <% } %>
                td.control
                    <% if(item.state != "up") { %>
                    img.btn.command(src="command-start.png",data-id="<%=item.id%>",data-command="launch")
                    <% } %>
                    img.btn.command(src="command-stop.png",data-id="<%=item.id%>",data-command="stop")
            <% }); %>

// Instances list
script.instances-template(type="text/template")
    ul.state-list
        <%  if(_.isEmpty(items)) { %>
        input.required(type="hidden",name="instance")
        li
            a.important(href="/instance") Click here to add server first
        <% } %>
        <% _.each(items, function(item) { %>
        li
            .state-icon-small
                img(src="state-<%=item.state%>.png")
                input.required(id="<%= item.id %>",type="checkbox",name="instance",value="<%= item.id %>",checked="false")
            .state-info-small
                label.instance-address(for="<%= item.id %>") &nbsp;<%= item.address %>
        <% }); %>

  
// Start dialog
script.launch-template(type="text/template")
    .launch.modal.hide.fade
        .modal-header
            a.close(href="#") × 
            h3 Start Service
        form.modal-body
            ul.tabs
                li.active
                    a(href="#settings")  Settings
                li
                    a(href="#servers") Servers
                li
                    a(href="#advanced") Advanced
            .tab-content
                #settings.active
                    .clearfix
                        label App
                        .input
                            input.required.urlpopover(type="text",name="name",value="<%= item.name %>")
                            span.help-block
                                span Provide name of the &nbsp;
                                a(href="http://npmjs.org/", target="new",rel='twipsy',title='Node.js package manager') npm
                                span &nbsp;compatible package that containing a executable&nbsp;
                                a(href="http://npmjs.org/doc/json.html", target="new", rel='twipsy',title='WEB app that will be started on HTTP port') server
                                span &nbsp;script.
                    .clearfix
                        label Domain Name
                        .input-append.input
                            input.span4.required.domain(type="text",name="domain",value="<%= item.domain %>")
                            span.add-on
                                input.public(type="checkbox", id="public", name="public", data-domain="<%= item.domain %>")
                    .clearfix
                        .input
                            div.help-block
                                div You can set public domain name for this service.
                                div Traffic from this domain will be proxied to service port.
                #servers
                    .clearfix
                        label Servers to run
                        .input
                            #items
                            span.help-block
                                span Select server(s) to run app
                                div 
                                    span Use servers in
                                    span(style="color: green") &nbsp;green&nbsp;
                                    span state to avoid errors.
                #advanced
                    .clearfix.custom
                            label Private Port Number
                            .input
                                input.span2.custom-input.required.port(type="text",name="port",value="<%= item.port %>")
                                span.help-block
                                    div Service local port number. Use free unique port for each service.
                    .clearfix
                        label GIT repository
                        .input
                            input.span6.source(type="text",name="source",value="<%= item.source %>")
                            span.help-block
                                div Override package source URL
        .modal-footer
            a.btn.primary.execute(href="#") Start Service
            a.btn.secondary.cancel(href="#") Cancel

// Stop dialog
script.stop-template(type="text/template")
    .modal.hide.fade
        .modal-header
            a.close(href="#") × 
            h3 Stop Service
        form.modal-body
            .clearfix
                label Service Data
                .input
                    ul.inputs-list
                        li
                            label
                                input(type="radio", checked="true", name="data", value="keep")
                                b Keep service data
                                span.help-block You can restart service later
                        li
                            label
                                input(type="radio", name="data", value="delete")
                                span.red Uninstall service and purge data
                                span.help-block This cannot be undone! Use this with caution.
        .modal-footer
            a.btn.primary.execute(href="#") Stop Service
            a.btn.secondary.cancel(href="#") Cancel

