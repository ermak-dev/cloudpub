#!/usr/bin/env node
var forever = require('forever')
    ,path = require('path');

var command = process.argv[2]

console.log("Command: ", command)

/* This function taken from the forever source */
function tryStart(file, options, callback) {
  var fullLog, fullScript;

  fullLog = forever.logFilePath(options.logFile, options.uid);
  fullScript = path.join(options.sourceDir, file);

  forever.stat(fullLog, fullScript, options.appendLog, function (err) {
    if (err) {
      forever.log.error('Cannot start forever');
      forever.log.error(err.message);
      process.exit(-1);
    }

    callback();
  });
}

function doStop(index) {
  var runner = forever.stop(index, true);

  runner.on('stop', function (process) {
    forever.log.data(process);
  });

  runner.on('error', function (err) {
    forever.log.error(err);
  });
}

/*
    Start daemon command 
    argv = ['uid', 'daemon', 'command', 'line']
*/
if( command == 'start') {

    var i = process.argv.indexOf(command);
    var uid = process.argv[i+1] || process.env.ID;
    var file = process.argv.slice(i+2), options = {
        silent : false,
        appendLog: true,
        killTree: true,
        minUptime: 1000,
        spinSleepTime: 1000,
        command: 'exec',
        uid: uid
    };

    // a little sanity check
    tryStart(file, options, function () {

        console.log("Start service ", uid, "(", file.join(' '), ")" );

        // Start daemon (fork process here)
        var monitor = forever.startDaemon(file, options);
        // Flag that daemon started successfully
        var started = false;

        monitor.on('start', function () {
            console.log("Process started");
            // register in forever registry if started
            forever.startServer(monitor);
            started = true;
        });

        // If children died until we executing
        monitor.on('exit', function(err) {
            // we will also die with the same error
            console.error( "Process died", err );
            process.exit(1);
        });
    });
}
/* Stop daemon commnad 
    parameter = ID (or env.ID used)
*/
else if( command == 'stop') {

   var file = process.argv.slice(3);

   forever.list( false, function(err, list) {
        if(err) {
            console.error(err.message || err);
            process.exit(1);
        }
        var killed = false;
        for(index in list) {
            var item = list[index];
            if(item.uid == process.env.ID || item.uid == file) {
                console.log("Stopping process", index, item.uid);
                doStop( index );
                killed = true;
            }
        }
        if(!killed) {
            console.error("No processes found");
        }
    });
}
else {
    console.error("Invalid command", command);
    process.exit(1);
}
